name: Deploy golang application to AWS EC2

on:
  push:
    branches:
      - main
      - master

permissions:
  id-token: write
  # contents: read
  security-events: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check if Machine IP is configured
        shell: bash
        run: |
          if [ -z "${{ secrets.AWS_REMOTE_MACHINE }}" ]; then
            echo "Error: AWS_REMOTE_MACHINE secret is not set!"
            exit 1
          fi

      - name: Set up keys
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1
        with:
          ssh-private-key: ${{ secrets.SSH_GITHUB_PRIVATE_KEY }}
          ssh-host: ${{ secrets.AWS_REMOTE_MACHINE }}
          ssh-port: 22
        
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y rsync

      - name: Set up GO
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.0"

      - name: Build GO
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ~/simple-http-server main.go

      - name: Deploy
        run: |
          # Disable and Remove Service running
          ssh -t ubuntu@${{ secrets.AWS_REMOTE_MACHINE }} <<'EOF'
            if systemctl list-units --type=service | grep -q "http-server.service"; then
              sudo systemctl stop http-server
              sudo systemctl disable http-server
              sudo rm -rf ~/simple-http-server
              echo "Service http-server stopped, disabled, and binary removed."
            else
              echo "Service http-server does not exist, skipping operations."
            fi
          EOF

          # Set up Environment variables
          ssh ubuntu@${{ secrets.AWS_REMOTE_MACHINE }} "
            echo 'export ENVIRONMENT=\"production\"' >> ~/.bashrc &&
            echo 'export ENVIRONMENT=\"production\"' | sudo tee -a /etc/environment &&
            source ~/.bashrc &&
            echo \$ENVIRONMENT
          "
          scp ~/simple-http-server ubuntu@${{ secrets.AWS_REMOTE_MACHINE }}:~
          rsync -avz ./http-server.service ubuntu@${{ secrets.AWS_REMOTE_MACHINE }}:~
          rsync -avz ./html ubuntu@${{ secrets.AWS_REMOTE_MACHINE }}:~/html/
          ssh -t ubuntu@${{ secrets.AWS_REMOTE_MACHINE }} 'sudo mv ~/http-server.service /etc/systemd/system'
          ssh -t ubuntu@${{ secrets.AWS_REMOTE_MACHINE }} 'sudo systemctl daemon-reload'
          ssh -t ubuntu@${{ secrets.AWS_REMOTE_MACHINE }} 'sudo systemctl enable http-server'
          ssh -t ubuntu@${{ secrets.AWS_REMOTE_MACHINE }} 'sudo systemctl restart http-server'
